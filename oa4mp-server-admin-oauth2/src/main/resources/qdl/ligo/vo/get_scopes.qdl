/*
   Utility function to compute scopes based on group memberships.
   arg 0 is the group (claims.isMemberOf. usually)
*/

 block[
   γ. := script_args(0);

   ζ.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames'];
      ζ.'Communities:LVC:SegDB:SegDBWriter' := 'write:/DQSegDB';
        ζ.'gw-astronomy:KAGRA-LIGO:members' := 'read:/frames';

   return(~values(mask(ζ., in_group2(keys(ζ.),γ.))));
   /*
   Alternate as of 1.4.7 if γ is structured as per g. in the example below
   return(reduce(@~,ζ\(γ\*\name)));
   */
   ]; // end block

    /*
   // example replacement for above with much simpler data:

         zeta.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames'];
      zeta.'Communities:LVC:SegDB:SegDBWriter' := 'write:/DQSegDB';
        zeta.'gw-astronomy:KAGRA-LIGO:members' := 'read:/frames';
  g. := [{'name': 'Services:MailingLists:Testing:eligible_factor'},{'name': 'Communities:LSCVirgoLIGOGroupMembers'},{'name':'Communities:LVC:SegDB:SegDBWriter'}]

   // To get the permissions in one fell swoop:
     ~values(mask(zeta., in_group2(keys(zeta.),g.)))
 [write:/DQSegDB,read:/DQSegDB,read:/frames]

 define
 [
 check(path.)
 ]
 >> check(path.) this will take a list of paths to files and test the syntax of the
 >> files for an OA4MP service, reporting any errors.
 while[for_next(file,path.)][r:=check_syntax(file_read(file));line_out:=file+': '+(size(r)==0?'ok':'\n   '+r);say(line_out);]
 ;
 ];

    */